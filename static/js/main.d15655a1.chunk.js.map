{"version":3,"sources":["theme/GlobalStyle.tsx","templates/MainTemplate.tsx","base/variables.tsx","utils/index.tsx","api/openaq.tsx","api/wikipedia.tsx","context/index.tsx","components/Datalist/Option/Option.tsx","components/Datalist/Datalist.tsx","components/Button/Button.tsx","components/Label/Label.tsx","components/Input/Input.tsx","components/SearchForm/SearchForm.tsx","components/ErrorMessage/ErrorMessage.tsx","components/Spinner/Spinner.tsx","templates/CitiesTemplate.tsx","components/List/ListItem/ListItem.tsx","components/CityList/CityItem/CityItem.tsx","components/List/List.tsx","components/CityList/CityList.tsx","views/Cities.tsx","views/Root.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","StyledMain","styled","main","MainTemplate","children","displayName","countries","abbrList","createQueryParams","params","Object","keys","map","k","join","defaultParams","limit","order_by","sort","parameter","date_from","date","year","getUTCFullYear","month","getUTCMonth","slice","day","getUTCDate","setDate","Date","fetchPollutionData","country","axios","action","format","explaintext","redirects","prop","exintro","exsentences","fetchWikipediaData","titles","PageContext","React","createContext","undefined","Option","memo","value","Datalist","props","key","StyledButton","button","backgroundColor","Button","StyledLabel","label","Label","labelName","srOnly","className","StyledInput","input","Input","StyledForm","form","StyledFormGroup","div","SearchForm","context","useContext","onSubmit","e","preventDefault","target","querySelector","doFetch","type","autoComplete","name","list","id","disabled","isLoading","ErrorMessage","p","StyledSpinner","Spinner","aria-busy","role","CitiesTemplate","isError","ListItem","li","CityItem","title","description","List","ul","StyledList","CityList","cities","length","city","pageid","extract","filterByDuplicates","items","arr","filter","item","index","array","findIndex","obj","splice","getTitles","str","split","encodeURIComponent","getAbbr","abbr","toLowerCase","Cities","useState","data","setData","setIsLoading","setIsError","a","pollutedCities","removedDuplicates","results","wikipediaResponse","pages","query","values","useDataApi","Provider","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d15655a1.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, *::after {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n  }\n\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport styled from 'styled-components';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nconst StyledMain = styled.main`\n  margin: 0 auto;\n  padding: 0 30px;\n  text-align: center;\n\n  @media (min-width: 576px) {\n    max-width: 600px;\n  }\n`;\n\ntype MainTemplateProps = {\n  readonly children: React.ReactNode;\n};\n\nconst MainTemplate = ( { children }: MainTemplateProps ) => {\n  return (\n    <StyledMain>\n      <h1>The most polluted cities</h1>\n      <p>Check 10 the most polluted cities in Poland, Germany, Spain or France.</p>\n      <GlobalStyle />\n      {children}\n    </StyledMain>\n  );\n};\nMainTemplate.displayName = 'MainTemplate';\n\nexport default MainTemplate;\n","export const wikipediaUrl = 'https://en.wikipedia.org/w/api.php?origin=*';\n\nexport const openaqUrl = 'https://api.openaq.org/v1';\n\nexport const countries = [ 'Poland', 'Germany', 'Spain', 'France' ];\n\nexport const abbrList = [ 'PL', 'DE', 'ES', 'FR' ];\n","export function createQueryParams<T extends object>( params: T ) {\n  const paramKeys = Object.keys( params ) as Array<keyof typeof params>;\n  return paramKeys.\n    map( ( k ) => {\n      return `${k}=${params[ k ]}`;\n    } ).\n    join( '&' );\n}\n","import axios from 'axios';\nimport { openaqUrl } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst setDate = ( date: Date ) => {\n  const year = date.getUTCFullYear();\n  const month = `0${date.getUTCMonth() + 1}`.slice( -2 );\n  const day = `0${date.getUTCDate()}`.slice( -2 );\n\n  return `${year}-${month}-${day}`;\n};\n\nconst limit = 500;\nconst measurements = '/measurements';\n\nconst defaultParams = {\n  limit,\n  order_by: 'value',\n  sort: 'desc',\n  parameter: 'pm25',\n  date_from: setDate( new Date() )\n};\n\nconst fetchPollutionData = ( country: string ) => {\n  const queryParams = { ...defaultParams, country };\n  const params = createQueryParams( queryParams );\n\n  return axios( `${openaqUrl}${measurements}?${params}` );\n};\n\nexport default fetchPollutionData;\n","import axios from 'axios';\nimport { wikipediaUrl } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst defaultParams = {\n  action: 'query',\n  format: 'json',\n  explaintext: '',\n  redirects: 1,\n  prop: 'extracts',\n  exintro: '',\n  exsentences: 2\n};\n\nconst fetchWikipediaData = ( titles: string ) => {\n  const queryParams = { ...defaultParams, titles };\n  const params = createQueryParams( queryParams );\n\n  return axios( `${wikipediaUrl}&${params}` );\n};\n\nexport default fetchWikipediaData;\n","import React from 'react';\n\ntype State = {\n  doFetch: any;\n  isLoading: boolean;\n};\n\nconst PageContext = React.createContext<State | undefined>( undefined );\n\nexport default PageContext;\n","import React from 'react';\n\ntype OptionProps = {\n  readonly country: string;\n};\n\nconst Option = React.memo<OptionProps>( ( { country } ) => {\n  return <option value={country} />;\n} );\nOption.displayName = 'Option';\n\nexport default Option;\n","import React from 'react';\nimport Option from './Option/Option';\n\ntype DatalistProps = {\n  readonly countries: string[];\n  readonly id: string;\n};\n\nconst Datalist = React.memo<DatalistProps>( ( { countries, ...props } ) => {\n  return (\n    <datalist {...props}>\n      {countries.map( ( country ) => {\n        return <Option key={country} country={country} />;\n      } )}\n    </datalist>\n  );\n} );\nDatalist.displayName = 'Datalist';\n\nexport default Datalist;\n","import React, { ComponentProps } from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button<{ backgroundColor: string}>`\n  display: inline-block;\n  font-weight: 400;\n  color: #fff;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  background-color: ${( props ) => {\n    return props.backgroundColor ? props.backgroundColor : 'green';\n  }};\n  border: 1px solid #007bff;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s;\n\n  &:disabled {\n    opacity: 0.65;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\ntype ButtonProps = ComponentProps<typeof StyledButton>;\n\nconst Button = React.memo<ButtonProps>( ( { ...props } ) => {\n  return <StyledButton {...props}/>;\n} );\nButton.displayName = 'Button';\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  width: 100%;\n  display: inline-block;\n`;\n\ntype LabelProps = {\n  readonly labelName: string;\n  readonly srOnly?: boolean;\n};\n\nconst Label = React.memo<React.PropsWithChildren<LabelProps>>( ( { children, labelName, srOnly = false } ) => {\n  return (\n    <StyledLabel>\n      {srOnly ? <span className=\"sr-only\">{labelName}</span> : <>{labelName}</>}\n      {children}\n    </StyledLabel>\n  );\n} );\nLabel.displayName = 'Label';\n\nexport default Label;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  height: calc(1.5em + 0.75rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n`;\n\ntype InputProps = {\n  type?: string;\n  autoComplete?: string;\n  name?: string;\n  list?: string;\n};\n\nconst Input = React.memo<InputProps>( ( { ...props } ) => {\n  return <StyledInput {...props} />;\n} );\nInput.displayName = 'Input';\n\nexport default Input;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { countries } from 'base/variables';\nimport Datalist from 'components/Datalist/Datalist';\nimport Button from 'components/Button/Button';\nimport Label from 'components/Label/Label';\nimport Input from 'components/Input/Input';\nimport PageContext from 'context';\n\nconst StyledForm = styled.form`\n  margin-top: 20px;\n  margin-bottom: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  @media (min-width: 400px) {\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n  }\n`;\n\nconst StyledFormGroup = styled.div`\n  position: relative;\n  flex: 0 0 70%;\n\n  @media (min-width: 400px) {\n    margin-right: 4px;\n  }\n`;\n\ntype SearchFormProps = {\n  role?: string;\n};\n\nconst SearchForm = React.memo<SearchFormProps>( ( { ...props } ) => {\n  const context = useContext( PageContext )!;\n\n  return (\n    <StyledForm\n      {...props}\n      onSubmit={( e ) => {\n        e.preventDefault();\n        const formElement = e.target as HTMLFormElement;\n        const value = ( formElement.querySelector( 'input[name=\\'country\\']' )! as HTMLInputElement ).value;\n        context.doFetch( value );\n      }}\n    >\n      <StyledFormGroup>\n        <Label labelName=\"Country name:\" srOnly>\n          <Input type=\"text\" autoComplete=\"off\" name=\"country\" list=\"countries\" />\n          <Datalist id=\"countries\" countries={countries} />\n        </Label>\n      </StyledFormGroup>\n      <Button type=\"submit\" disabled={context.isLoading} backgroundColor=\"#007bff\">\n        Search\n      </Button>\n    </StyledForm>\n  );\n} );\nSearchForm.displayName = 'SearchForm';\n\nexport default SearchForm;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.p`\n  width: 100%;\n  height: 18px;\n  font-weight: 700;\n  color: red;\n`;\nErrorMessage.displayName = 'ErrorMessage';\n\nexport default ErrorMessage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.div`\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border 0.75s linear infinite;\n\n  @keyframes spinner-border {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Spinner = () => {\n  return (\n    <StyledSpinner aria-busy=\"true\" role=\"progressbar\">\n      <span className=\"sr-only\">Loading content...</span>\n    </StyledSpinner>\n  );\n};\nSpinner.displayName = 'Spinner';\n\nexport default Spinner;\n","import React from 'react';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport Spinner from 'components/Spinner/Spinner';\n\ntype CitiesTemplateProps = {\n    isError: string;\n    isLoading: boolean;\n};\n\nconst CitiesTemplate = React.memo<React.PropsWithChildren<CitiesTemplateProps>>( ( { children, isError, isLoading } ) => {\n  return (\n    <>\n      <ErrorMessage>{isError}</ErrorMessage>\n      <SearchForm role=\"search\" />\n      {isLoading && <Spinner />}\n      {children}\n    </>\n  );\n} );\nCitiesTemplate.displayName = 'CitiesTemplate';\n\nexport default CitiesTemplate;\n","import styled from 'styled-components';\n\nconst ListItem = styled.li`\n  margin-bottom: -1px;\n  padding: 0.75rem 1.25rem;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n\n  :first-child {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n\n  :last-child {\n    margin-bottom: 0;\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n`;\nListItem.displayName = 'ListItem';\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from 'components/List/ListItem/ListItem';\n\ntype CityItemProps = {\n  title: string;\n  description: string;\n};\n\nconst CityItem = React.memo<CityItemProps>( ( { title, description } ) => {\n  return (\n    <ListItem>\n      <h2>{title}</h2>\n      <p>{description}</p>\n    </ListItem>\n  );\n} );\nCityItem.displayName = 'CityItem';\n\nexport default CityItem;\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  padding: 0;\n  list-style: none;\n`;\nList.displayName = 'List';\n\nexport default List;\n","import React from 'react';\nimport styled from 'styled-components';\nimport CityItem from 'components/CityList/CityItem/CityItem';\nimport List from 'components/List/List';\n\nconst StyledList = styled( List )`\n  margin-top: 40px;\n`;\n\ntype CityListProps = {\n  cities: {\n    pageid: number;\n    title: string;\n    extract: string;\n    ns: number;\n  }[];\n};\n\nconst CityList = React.memo<CityListProps>( ( { cities } ) => {\n  return (\n    <>\n      {cities.length > 0 && (\n        <StyledList>\n          {cities.map( ( city ) => {\n            return <CityItem key={city.pageid} title={city.title} description={city.extract} />;\n          } )}\n        </StyledList>\n      )}\n    </>\n  );\n} );\nCityList.displayName = 'CityList';\n\nexport default CityList;\n","import React, { useState } from 'react';\nimport { AxiosResponse } from 'axios';\nimport { Measurements, Pages, PollutedCitiesResponse, WikipediaResponse } from '../base/types';\nimport fetchPollutionData from 'api/openaq';\nimport fetchWikipediaData from 'api/wikipedia';\nimport PageContext from 'context';\nimport { countries, abbrList } from 'base/variables';\nimport CitiesTemplate from 'templates/CitiesTemplate';\nimport CityList from 'components/CityList/CityList';\n\nfunction filterByDuplicates<T extends keyof Measurements>( items: Measurements[], value: T ) {\n  const arr = items.filter( ( item, index, array ) => {\n    return index === array.findIndex( ( obj ) => {\n      return obj[ value ] === item[ value ];\n    } );\n  } );\n\n  arr.splice( 10 );\n  return arr;\n}\n\nconst getTitles = ( items: Measurements[] ) => {\n  const str = items.map( ( item ) => {\n    return item.city.split( '/' )[ 0 ];\n  } );\n\n  return encodeURIComponent( str.join( '|' ) );\n};\n\nconst getAbbr = ( abbr: string ) => {\n  const value = abbr.toLowerCase();\n  const index = countries.findIndex( ( country ) => {\n    return country.toLowerCase() === value;\n  } );\n\n  return abbrList[ index ];\n};\n\nconst useDataApi = () => {\n  const [ data, setData ] = useState<Pages[]>( [] );\n  const [ isLoading, setIsLoading ] = useState( false );\n  const [ isError, setIsError ] = useState( '' );\n\n  const fetchData = async ( value: string ) => {\n    const abbr = getAbbr( value );\n\n    if ( abbr !== undefined ) {\n      setData( [] );\n      setIsError( '' );\n      setIsLoading( true );\n      try {\n        const pollutedCities: AxiosResponse<PollutedCitiesResponse> = await fetchPollutionData( abbr );\n        const removedDuplicates = filterByDuplicates( pollutedCities.data.results, 'city' );\n        const titles = getTitles( removedDuplicates );\n        const wikipediaResponse: AxiosResponse<WikipediaResponse> = await fetchWikipediaData( titles );\n        const { data: { query: { pages } } } = wikipediaResponse;\n\n        setIsLoading( false );\n        setData( Object.values( pages ) );\n      } catch ( error ) {\n        setIsError( 'Something went wrong, try again...' );\n        setIsLoading( false );\n      }\n    } else {\n      setIsError( 'Wrong country provided' );\n    }\n  };\n\n  return [ data, isLoading, isError, fetchData ] as [Pages[], boolean, string, ( value: string ) => void];\n};\n\nconst Cities = () => {\n  const [ data, isLoading, isError, doFetch ] = useDataApi();\n\n  return (\n    <PageContext.Provider\n      value={{\n        doFetch,\n        isLoading\n      }}\n    >\n      <CitiesTemplate isError={isError} isLoading={isLoading}>\n        <CityList cities={data} />\n      </CitiesTemplate>\n    </PageContext.Provider>\n  );\n};\n\nexport default Cities;\n","import React from 'react';\nimport 'normalize.css';\nimport MainTemplate from 'templates/MainTemplate';\nimport Cities from 'views/Cities';\n\nconst Root = () => {\n  return (\n    <MainTemplate>\n      <Cities />\n    </MainTemplate>\n  );\n};\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'views/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}